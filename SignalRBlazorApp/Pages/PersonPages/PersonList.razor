@page "/Persons"
@inject NavigationManager NavigationManager

@if (Persons == null)
{
    <p>None!</p>
}
else
{
    <tr id="addRow" style="display:@AddRowStyle">
        <td></td>
        <td>
            <input @bind="NewNumber" placeholder="New Number" />
        </td>
        <td>
            <input @bind="NewFirstName" placeholder="New FirstName" />
        </td>
        <td class="text-center">
            <button class="btn btn-success" @onclick="AddPersonAsync">Add</button>
        </td>
        <td>
            <input @bind="SearchString" />
            <button class="btn btn-success" @onclick="Search">Search</button>
        </td>

    </tr>
    <tr id="editRow" style="display:@EditRowStyle">
    <tr>
        <td class="text-center">
            <input @bind="person.Number" />
        </td>
        <td class="text-center">
            <input @bind="person.FirstName" />
        </td>
        <td class="text-center">
            <button class="btn btn-success" @onclick="SaveItemAsync">
                Save
            </button>
            <button class="btn btn-danger" @onclick="CancelChange">
                Cancel
            </button>
        </td>
    </tr>

    <tr>
        <a>Person in Departments</a>
        <SelectComponent Deps="DepSelects" SelectedItems="SelectId" />
    </tr>
    </tr>
    <tr id="confirmDelSpan" style="display:@DelConfirmStyle">
        @* <td class="text-center">Are you sure want to delete @person.FirstName</td>
        <td>
            <button class="btn btn-warning" @onclick="DeleteItem">
                Yes
            </button>
            <button class="btn btn-warning" @onclick="CancelChange">
                No
            </button>
        </td> *@
        <DeleteConfirm ItemName="@person.FirstName" OnCancelChange="CancelChange" OnDeleteItem="DeleteItemAsync" />
    </tr>
    <table class="table">
        <thead>
            <tr>
                <th class="text-center">
                    <label>ID</label>
                </th>
                <th class="text-center">
                    <label>Number</label>
                </th>
                <th class="text-center">
                    <label>FirstName</label>
                </th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in Persons)
            {
                <tr>
                    <td>@item.Id</td>
                    <td>@item.Number</td>
                    <td>@item.FirstName</td>
                    <td class="text-center">
                        <button class="btn btn-warning" @onclick="@(() => EditPersonAsync(item.Id))">
                            Edit
                        </button>
                        <button class="btn btn-warning" @onclick="@(() => DeleteConfirm(item.Id))">
                            Delete
                        </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
    <Paginat TotalPages="TotalPages" CurrentPage="CurrentPage" CurrentPageValueChanged="CurrentPageValue"
        PageSizeChanged="PageSizeChanged" />

}


@code {
    private IEnumerable<Person>? DateSource { get; set; }
    private List<Person> Persons = new();
    private IEnumerable<DepSelect>? DepSource { get; set; }
    private List<DepSelect> DepSelects = new();
    public List<long> SelectId = new();
    private Person person = new();
    private string EditRowStyle = "none";
    private string? AddRowStyle;
    private string DelConfirmStyle = "none";
    private string? NewNumber;
    private string? NewFirstName;
    private string? ServiceRequest;
    private string? SearchString { get; set; }
    private int CurrentPage { get; set; } = 1;
    private int PageSize { get; set; } = 5;
    private int TotalPages { get; set; }


    protected override async Task OnInitializedAsync()
    {
        if (string.IsNullOrEmpty(await localStorageService.GetItemAsStringAsync("auth")!))
        {
            NavManager.NavigateTo("/login");
            return;
        }
        HubConnection hubConnection = new HubConnectionBuilder()
        //.WithUrl(Navigation.ToAbsoluteUri("/chathub"))
        .WithUrl("https://localhost:7286/chathub", options =>
        {
            options.AccessTokenProvider = async () =>
    {
            string token = await localStorageService.GetItemAsStringAsync("auth")!;
            var deserializeToken = Serializations.DeserializeJsonString<UserSession>(token);
            return deserializeToken.Token;
        };
        })
        .Build();
        ////持有者令牌身份验证，参阅：https://learn.microsoft.com/zh-cn/aspnet/core/security/cors?view=aspnetcore-8.0
        ServiceRequest = $"{Config.GetValue<string>("BackendUrl")}/Person";
        var httpClient = await getHttpClient.GetPrivateHttpClient();
        var requestUrl = $"{ServiceRequest}/GetPersons";
        DateSource = await httpClient.GetFromJsonAsync<Person[]>(requestUrl);
        DepSource = await httpClient.GetFromJsonAsync<DepSelect[]>($"{ServiceRequest}/GetDepSelect?id=0");
        DepSelects = DepSource.ToList();
        TotalPages = DateSource.Count() % PageSize == 0 ? DateSource.Count() / PageSize : DateSource.Count() / PageSize + 1;

        hubConnection.On<string>("NoteMessage", async notemsg =>
        {
            if (notemsg == "Update")
            {
                DateSource = await httpClient.GetFromJsonAsync<Person[]>(requestUrl);
                GetPersons();
            }
            await InvokeAsync(StateHasChanged);
        });
        await hubConnection.StartAsync();

        GetPersons();
    }
    private void GetPersons()
    {

        if (string.IsNullOrEmpty(SearchString))
        {
            Persons = DateSource.Skip((CurrentPage - 1) * PageSize).Take(PageSize).ToList();
        }
        else
        {
            DateSource = DateSource.Where(p => p.FirstName.Contains(SearchString)).ToList();
            TotalPages = DateSource.Count() % PageSize == 0 ? DateSource.Count() / PageSize : DateSource.Count() / PageSize + 1;
            Persons = DateSource.Skip((CurrentPage - 1) * PageSize).Take(PageSize).ToList();
        }
    }
    private async Task Search()
    {
        CurrentPage = 1;
        await OnInitializedAsync();
    }
    private async Task AddPersonAsync()
    {
        var httpClient = await getHttpClient.GetPrivateHttpClient();
        if (!string.IsNullOrEmpty(NewNumber) && !string.IsNullOrEmpty(NewFirstName))
        {
            var addPerson = new Person { Number = NewNumber, FirstName = NewFirstName };
            await httpClient.PostAsJsonAsync($"{ServiceRequest}/AddPerson", addPerson);
            NewNumber = string.Empty;
            NewFirstName = string.Empty;
            CurrentPage = TotalPages;
            await OnInitializedAsync();
            EditRowStyle = "none";
        }
    }
    private async Task EditPersonAsync(long id)
    {
        if (Persons is not null)
        {
            DepSelects.Clear();
            SelectId.Clear();
            ServiceRequest = $"{Config.GetValue<string>("BackendUrl")}/Person";
            var httpClient = await getHttpClient.GetPrivateHttpClient();
            DepSource = await httpClient.GetFromJsonAsync<DepSelect[]>($"{ServiceRequest}/GetDepSelect?id={id}");
            DepSelects = DepSource.ToList();
            foreach (var dep in DepSource.Where(d => d.IsSelect == true))
            {
                SelectId.Add(dep.Id);
            }
            person = Persons.Single(i => i.Id == id);
            AddRowStyle = "none";
            DelConfirmStyle = "none";
            EditRowStyle = "table-row";
        }
    }
    private async Task SaveItemAsync()
    {
        var httpClient = await getHttpClient.GetPrivateHttpClient();
        if (person is not null)
        {
            await httpClient.PutAsJsonAsync($"{ServiceRequest}/EditPerson?id={person.Id}", person);
            await httpClient.PutAsJsonAsync($"{ServiceRequest}/UpdateDepSelect?id={person.Id}", SelectId);
        }
        DepSelects.Clear();
        SelectId.Clear();
        await OnInitializedAsync();
        EditRowStyle = "none";
        AddRowStyle = "table-row";
    }
    private void CancelChange(MouseEventArgs e)
    {
        DepSelects.Clear();
        SelectId.Clear();
        EditRowStyle = "none";
        DelConfirmStyle = "none";
        AddRowStyle = "table-row";
    }
    private void DeleteConfirm(long id)
    {
        person = Persons.Single(i => i.Id == id);
        AddRowStyle = "none";
        EditRowStyle = "none";
        DelConfirmStyle = "inline";
    }
    private async Task DeleteItemAsync(MouseEventArgs e)
    {
        var httpClient = await getHttpClient.GetPrivateHttpClient();
        if (person is not null)
        {
            await httpClient.DeleteAsync($"{ServiceRequest}/DeletePerson?id=" + Convert.ToInt32(person.Id));
        }
        await OnInitializedAsync();
        DelConfirmStyle = "none";
        AddRowStyle = "table-row";
    }
    private void CurrentPageValue(int newPage)
    {
        CurrentPage = newPage;
        GetPersons();
    }
    private void PageSizeChanged(int newPageSize)
    {
        PageSize = newPageSize;
        TotalPages = DateSource.Count() % PageSize == 0 ? DateSource.Count() / PageSize : DateSource.Count() / PageSize + 1;
        CurrentPage = 1;
        GetPersons();
    }
}
