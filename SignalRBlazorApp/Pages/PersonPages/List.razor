@page "/Persons"
@using Blazored.LocalStorage
@using Microsoft.AspNetCore.SignalR.Client
@using Microsoft.AspNetCore.Components.QuickGrid
@inject IConfiguration Config
@inject ILocalStorageService localStorageService
@inject NavigationManager NavigationManager


@if (dateSource == null)
{
    <p>None!</p>
}
else
{
    <tr id="addRow" style="display:@addRowStyle">
        <td></td>
        <td>
            <input @bind="newItemNumber" placeholder="New Number" />
        </td>
        <td>
            <input @bind="newItemFirstName" placeholder="New FirstName" />
        </td>
        <td class="text-center">
            <button class="btn" @onclick="AddPerson">Add</button>
        </td>
        <td>
            <p>
                <input type="search" @bind="searchString" @bind:event="oninput" placeholder="Search" />
            </p>
        </td>        
    </tr>
    <tr>

    </tr>
    <tr id="editRow" style="display:@editRowStyle">
        <td class="text-center">
            <input @bind="person.Number" />
        </td>
        <td class="text-center">
            <input @bind="person.FirstName" />
        </td>
        <td class="text-center">
            <button class="btn btn-success" @onclick="SaveItem">
                Save
            </button>
            <button class="btn btn-danger" @onclick="CancelChange">
                Cancel
            </button>
        </td>
    </tr>
    <div>
        <QuickGrid Class="table" Items="PersonsFilter" Pagination="pagination">
            <PropertyColumn Property="person => person.Id" />
            <PropertyColumn Property="person => person.Number" Sortable="true"/>
            <PropertyColumn Property="person => person.FirstName" />

            <TemplateColumn Context="person">
                <button class="btn" @onclick="@(()=> EditPerson(person.Id))">Edit</button> |
                <button class="btn" @onclick="@(()=> DeletePerson(person.Id))">Delete</button>
            </TemplateColumn>
        </QuickGrid>
    </div>
    <Paginator State="pagination" />
}

@code {
    private PaginationState pagination = new PaginationState { ItemsPerPage = 5 };
    private IEnumerable<Person>? dateSource { get; set; }
    private Person person = new();
    private string editRowStyle = "none";
    private string addRowStyle = "table-row";
    private string? newItemNumber;
    private string? newItemFirstName;
    private string? serviceRequest;
    private string? searchString { get; set; } = string.Empty;



    protected override async Task OnInitializedAsync()
    {
        HubConnection hubConnection = new HubConnectionBuilder()
        //.WithUrl(Navigation.ToAbsoluteUri("/chathub"))
        .WithUrl("https://localhost:7286/chathub", options =>
        {
            options.AccessTokenProvider = async () =>
            {
                string token = await localStorageService.GetItemAsStringAsync("auth")!;
                var deserializeToken = Serializations.DeserializeJsonString<UserSession>(token);
                return deserializeToken.Token;
            };
        })
        .Build();
        ////持有者令牌身份验证，参阅：https://learn.microsoft.com/zh-cn/aspnet/core/security/cors?view=aspnetcore-8.0

        hubConnection.On<string>("NoteMessage", async notemsg => 
        {
            if(notemsg=="Update")
            {
                await OnInitializedAsync();
            }
            await InvokeAsync(StateHasChanged);
        });
        await hubConnection.StartAsync();        
        serviceRequest = $"{Config.GetValue<string>("BackendUrl")}/Person";
        var httpClient = await getHttpClient.GetPrivateHttpClient();
        var requestUrl = $"{serviceRequest}/GetPersons";
        dateSource = await httpClient.GetFromJsonAsync<Person[]>(requestUrl);
    }

    private IQueryable<Person> PersonsFilter => dateSource.OrderByDescending(p => p.Id).Where(m => m.FirstName.Contains(searchString)).AsQueryable();

    private async Task AddPerson()
    {
        var httpClient = await getHttpClient.GetPrivateHttpClient();
        //Http.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);
        if(!string.IsNullOrEmpty(newItemNumber) && !string.IsNullOrEmpty(newItemFirstName))
        {
            var addPerson = new Person { Number = newItemNumber, FirstName = newItemFirstName };
            await httpClient.PostAsJsonAsync($"{serviceRequest}/AddPerson", addPerson);
            newItemNumber = string.Empty;
            newItemFirstName = string.Empty;
            StateHasChanged();
            editRowStyle = "none";
        }
    }

    private async Task EditPerson(long id)
    {
        var httpClient = await getHttpClient.GetPrivateHttpClient();
        //Http.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);
        if (dateSource is not null)
        {
            person = dateSource.Single(i => i.Id == id);
            addRowStyle = "none";
            editRowStyle = "table-row";
        }
    }
    private async Task SaveItem()
    {
        var httpClient = await getHttpClient.GetPrivateHttpClient();        
        if (dateSource is not null)
        {
            await httpClient.PutAsJsonAsync($"{serviceRequest}/EditPerson?id={person.Id}", person);
        }
        StateHasChanged();
        editRowStyle = "none";
        addRowStyle = "table-row";
    }
    private async Task CancelChange()
    {
        editRowStyle = "none";
        addRowStyle = "table-row";
    }
    private async Task DeletePerson(long id)
    {
        var httpClient = await getHttpClient.GetPrivateHttpClient();
        //Http.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);
        await httpClient.DeleteAsync($"{serviceRequest}/DeletePerson?id="+ Convert.ToInt32(id));
        StateHasChanged();
        editRowStyle = "none";
    }
    
    public class Person
    {
        public long Id { get; set; }
        public string Number { get; set; }
        public string FirstName { get; set; }

    }
}
