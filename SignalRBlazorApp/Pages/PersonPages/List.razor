@page "/Persons"
@using Blazored.LocalStorage
@using Microsoft.AspNetCore.SignalR.Client
@inject IConfiguration Config
@inject ILocalStorageService localStorageService
@inject NavigationManager NavigationManager


@if(persons == null)
{
    <p>None!</p>
}
else
{
    <tr id="addRow">
        <td></td>
        <td>
            <input @bind="newItemNumber" placeholder="New Number" />
        </td>
        <td>
            <input @bind="newItemFirstName" placeholder="New FirstName" />
        </td>
        <td class="text-center">
            <button class="btn btn-success" @onclick="AddPerson">Add</button>
        </td>
        <td>
            <label>Search: <input @bind="searchString" /></label>
            <button class="btn btn-success" @onclick="Filter">Filter</button>
        </td>

    </tr>
    <table class="table">

        <thead>
            <tr>
                <th class="text-center">
                    <label>ID</label>
                </th>
                <th class="text-center">
                    <label>Number</label>
                </th>
                <th class="text-center">
                    <label>FirstName</label>
                </th>
            </tr>
        </thead>
        <tbody>
            <tr id="editRow" style="display:@editRowStyle">
                <td class="text-center">
                    <input @bind="person.Number" />
                </td>
                <td class="text-center">
                    <input @bind="person.FirstName" />
                </td>
                <td class="text-center">
                    <button class="btn btn-success" @onclick="SaveItem">
                        Save
                    </button>
                    <button class="btn btn-danger" @onclick="CancelChange">
                        Cancel
                    </button>
                </td>
            </tr>
            @foreach (var item in persons)
            {
                <tr>
                    <td>@item.Id</td>
                    <td>@item.Number</td>
                    <td>@item.FirstName</td>
                    <td class="text-center">
                        <button class="btn btn-warning" @onclick="@(()=> EditPerson(item.Id))">
                            Edit
                        </button>
                        <button class="btn btn-warning" @onclick="@(async ()=> await DeletePerson(item.Id))">
                            Delete
                        </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
    <div>
        <button disabled="@firstPage" @onclick="GoToFirstPage">First</button>
        <button disabled="@firstPage" @onclick="GoToPreviousPage">Previous</button>
        <span>Page @currentPage of @totalPages</span>
        <button disabled="@lastPage" @onclick="GoToNextPage">Next</button>
        <button disabled="@lastPage" @onclick="GoToLastPage">Last</button>
    </div>
}


@code {
    private IEnumerable<Person>? dateSource { get; set; }
    private List<Person> date = new();
    private Person[]? persons { get; set; }
    private Person person = new();
    private string editRowStyle = "none";
    private string? newItemNumber;
    private string? newItemFirstName;
    private string? serviceRequest;
    private string? searchString { get; set; }
    private string? numberOrder { get; set; }
    private int currentPage { get; set; } = 1;
    private int pageSize { get; set; } = 5;
    private int totalPages { get; set; }
    private bool firstPage => currentPage == 1;
    private bool lastPage => currentPage == totalPages;


    protected override async Task OnInitializedAsync()
    {
        HubConnection hubConnection = new HubConnectionBuilder()
        //.WithUrl(Navigation.ToAbsoluteUri("/chathub"))
        .WithUrl("https://localhost:7286/chathub", options =>
        {
            options.AccessTokenProvider = async () =>
            {
                string token = await localStorageService.GetItemAsStringAsync("auth")!;
                var deserializeToken = Serializations.DeserializeJsonString<UserSession>(token);
                return deserializeToken.Token;
            };
        })
        .Build();
        ////持有者令牌身份验证，参阅：https://learn.microsoft.com/zh-cn/aspnet/core/security/cors?view=aspnetcore-8.0

        hubConnection.On<string>("NoteMessage", async notemsg => 
        {
            //Console.WriteLine(user);
            //Console.WriteLine(notemsg);
            //await GetPersons();
            if(notemsg=="Update")
            {
                await GetPersons();
            }
            await InvokeAsync(StateHasChanged);
        });
        await hubConnection.StartAsync();        
        serviceRequest = $"{Config.GetValue<string>("BackendUrl")}/Person";
        var httpClient = await getHttpClient.GetPrivateHttpClient();
        var requestUrl = $"{serviceRequest}/GetPersons";
        dateSource = await httpClient.GetFromJsonAsync<Person[]>(requestUrl);
        totalPages = dateSource.Count() % pageSize == 0 ? dateSource.Count() / pageSize : dateSource.Count() / pageSize + 1;
        date = new List<Person>(dateSource);
        await GetPersons();

    }

    private async Task GetPersons()
    {        
        if (string.IsNullOrEmpty(searchString))
        {   
            persons = date.Skip((currentPage - 1) * pageSize).Take(pageSize).ToArray();
        }
        else
        {
            date = date.Where(p => p.FirstName.Contains(searchString)).ToList();
            totalPages = date.Count() % pageSize == 0 ? date.Count() / pageSize : date.Count() / pageSize + 1;
            persons = date.Skip((currentPage - 1) * pageSize).Take(pageSize).ToArray();
        }
    }
    private async Task Filter()
    {
        currentPage = 1;
        await OnInitializedAsync();
    }

    private async Task AddPerson()
    {
        var httpClient = await getHttpClient.GetPrivateHttpClient();
        //Http.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);
        if(!string.IsNullOrEmpty(newItemNumber) && !string.IsNullOrEmpty(newItemFirstName))
        {
            var addPerson = new Person { Number = newItemNumber, FirstName = newItemFirstName };
            await httpClient.PostAsJsonAsync($"{serviceRequest}/AddPerson", addPerson);
            newItemNumber = string.Empty;
            newItemFirstName = string.Empty;
            StateHasChanged();
            await OnInitializedAsync();
            editRowStyle = "none";
        }
    }

    private async Task EditPerson(long id)
    {
        var httpClient = await getHttpClient.GetPrivateHttpClient();
        //Http.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);
        if(persons is not null )
        {
            person = persons.Single(i => i.Id == id);
            editRowStyle = "table-row";
        }
    }
    private async Task SaveItem()
    {
        var httpClient = await getHttpClient.GetPrivateHttpClient();        
        if(person is not null)
        {
            await httpClient.PutAsJsonAsync($"{serviceRequest}/EditPerson?id={person.Id}", person);
        }
        await GetPersons();
        StateHasChanged();
        editRowStyle = "none";
    }
    private async Task CancelChange()
    {
        await GetPersons();
        editRowStyle = "none";
    }
    private async Task DeletePerson(long id)
    {
        var httpClient = await getHttpClient.GetPrivateHttpClient();
        //Http.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);
        await httpClient.DeleteAsync($"{serviceRequest}/DeletePerson?id="+ Convert.ToInt32(id));
        await OnInitializedAsync();
        StateHasChanged();
        editRowStyle = "none";
    }
    private async void GoToFirstPage()
    {
        currentPage = 1;
        await GetPersons();
    }
    private async void GoToNextPage()
    {        
        currentPage++;
        await GetPersons();
    }
    private async void GoToPreviousPage()
    {
        currentPage--;
        await GetPersons();
    }
    private async void GoToLastPage()
    {
        currentPage = totalPages;
        await GetPersons();
    }
    public class Person
    {
        public long Id { get; set; }
        public string Number { get; set; }
        public string FirstName { get; set; }

    }
}
