@page "/login"
@using LoginClassLibrary
@using SignalRBlazorApp.Services


<div class="alert alert-info" mb-3>@Message</div>
<EditForm Model="login" OnValidSubmit="LoginAsync">
    <DataAnnotationsValidator />
    <h2>Use a account to log in.</h2>
    <hr />
    <ValidationSummary class="text-danger" role="alert" />
    <div class="form-floating mb-3">
        <InputText @bind-Value="login.UserName" class="form-control" autocomplete="username" aria-required="true" placeholder="UserName" />
        <label for="UserName" class="form-label">UserName</label>
        <ValidationMessage For="() => login.UserName" class="text-danger" />
    </div>
    <div class="form-floating mb-3">
        <InputText type="password" @bind-Value="login.Password" class="form-control" autocomplete="current-password" aria-required="true" placeholder="password" />
        <label for="password" class="form-label">Password</label>
        <ValidationMessage For="() => login.Password" class="text-danger" />
    </div>
    <div>
        <button type="submit" class="w-100 btn btn-lg btn-primary">Log in</button>
    </div>
</EditForm>

@code {
    string Message = string.Empty;
    LoginRequest login = new();
    async Task LoginAsync()
    {
        var result = await accountService.LoginAsync(login);
        if (result.Flag)
        {
            var localAuthStateProvider = (LocalAuthenticationStateProvider)AuthStateProvider;
            await localAuthStateProvider.UpdateAuthenticationState(new UserSession() { Token = result.Token, RefreshToken = result.RefreshToken });
            NavManager.NavigateTo("/", forceLoad: true);
        }
        else
        {
            Message = result.Message;
        }
    }
}
