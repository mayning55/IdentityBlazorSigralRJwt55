@page "/Departments"
@using Blazored.LocalStorage
@using DateClassLibrary.Data
@using Microsoft.AspNetCore.SignalR.Client
@inject IConfiguration Config
@inject ILocalStorageService localStorageService
@inject NavigationManager NavigationManager

@if (Departments == null)
{
    <p>None!</p>
}
else
{
    <tr id="addRow" style="display:@AddRowStyle">
        <td></td>
        <td>
            <input @bind="NewDepName" placeholder="New DepartmentName" />
        </td>
        <td class="text-center">
            <button class="btn btn-success" @onclick="AddItem">Add</button>
        </td>
        <td>
            <input @bind="SearchString" />
            <button class="btn btn-success" @onclick="Search">Search</button>
        </td>

    </tr>
    <tr id="editRow" style="display:@EditRowStyle">
        <td class="text-center">
            <input @bind="department.Name" />
        </td>
        <td class="text-center">
            <button class="btn btn-success" @onclick="SaveItem">
                Save
            </button>
            <button class="btn btn-danger" @onclick="CancelChange">
                Cancel
            </button>
        </td>
    </tr>
    <tr id="confirmDelSpan" style="display:@DelConfirmStyle">
        <DeleteConfirm ItemName="@department.Name" OnCancelChange="CancelChange" OnDeleteItem="DeleteItem"/>
    </tr>
    <table class="table">
        <thead>
            <tr>
                <th class="text-center">
                    <label>ID</label>
                </th>
                <th class="text-center">
                    <label>DepartmentName</label>
                </th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in Departments)
            {
                <tr>
                    <td>@item.Id</td>
                    <td>@item.Name</td>
                    <td class="text-center">
                        <button class="btn btn-warning" @onclick="@(() => ItemDetail(item.Id))">
                            Detail
                        </button>
                        <button class="btn btn-warning" @onclick="@(() => EditDepartment(item.Id))">
                            Edit
                        </button>
                        <button class="btn btn-warning" @onclick="@(() => DeleteConfirm(item.Id))">
                            Delete
                        </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
    <Paginat TotalPages="TotalPages" CurrentPage="CurrentPage" CurrentPageValueChanged="CurrentPageValue"
        PageSizeChanged="PageSizeChanged" />
    <tr id="depDetail" style="display:@ShowDepDetail">
        <DepPersons Persons="Persons" />
    </tr>

}

@code {
    private string? ServiceRequest;
    private string? SearchString { get; set; }
    private int CurrentPage { get; set; } = 1;
    private int PageSize { get; set; } = 5;
    private int TotalPages { get; set; }
    private long TepartmentID { get; set; }
    private IEnumerable<Department>? DateSource { get; set; }
    private List<Department> Departments = new();
    private List<Person> Persons = new();
    private Department department = new();
    private string? NewDepName;
    private string EditRowStyle = "none";
    private string? AddRowStyle;
    private string DelConfirmStyle = "none";
    private string ShowDepDetail = "none";
    protected override async Task OnInitializedAsync()
    {
        if (string.IsNullOrEmpty(await localStorageService.GetItemAsStringAsync("auth")!))
        {
            NavManager.NavigateTo("/login");
            return;
        }
        HubConnection hubConnection = new HubConnectionBuilder()
        //.WithUrl(Navigation.ToAbsoluteUri("/chathub"))
        .WithUrl("https://localhost:7286/chathub", options =>
        {
            options.AccessTokenProvider = async () =>
    {
            string token = await localStorageService.GetItemAsStringAsync("auth")!;
            var deserializeToken = Serializations.DeserializeJsonString<UserSession>(token);
            return deserializeToken.Token;
        };
        })
        .Build();
        ////持有者令牌身份验证，参阅：https://learn.microsoft.com/zh-cn/aspnet/core/security/cors?view=aspnetcore-8.0

        ServiceRequest = $"{Config.GetValue<string>("BackendUrl")}/Deparment";
        var httpClient = await getHttpClient.GetPrivateHttpClient();
        var requestUrl = $"{ServiceRequest}/GetAll";
        DateSource = await httpClient.GetFromJsonAsync<Department[]>(requestUrl);
        TotalPages = DateSource.Count() % PageSize == 0 ? DateSource.Count() / PageSize : DateSource.Count() / PageSize + 1;

        hubConnection.On<string>("DepMessage", async notemsg =>
        {
            if (notemsg == "Update")
            {
                DateSource = await httpClient.GetFromJsonAsync<Department[]>(requestUrl);
                await GetDepartments();
            }
            await InvokeAsync(StateHasChanged);
        });
        await hubConnection.StartAsync();

        await GetDepartments();
    }
    private async Task GetDepartments()
    {
        if (string.IsNullOrEmpty(SearchString))
        {
            Departments = DateSource.Skip((CurrentPage - 1) * PageSize).Take(PageSize).ToList();
        }
        else
        {
            DateSource = DateSource.Where(p => p.Name.Contains(SearchString)).ToList();
            TotalPages = DateSource.Count() % PageSize == 0 ? DateSource.Count() / PageSize : DateSource.Count() / PageSize + 1;
            Departments = DateSource.Skip((CurrentPage - 1) * PageSize).Take(PageSize).ToList();
        }
    }
    private async Task EditDepartment(long id)
    {
        if (Departments is not null)
        {
            department = Departments.Single(i => i.Id == id);
            AddRowStyle = "none";
            DelConfirmStyle = "none";
            EditRowStyle = "table-row";
        }
    }
    private async Task AddItem()
    {
        var httpClient = await getHttpClient.GetPrivateHttpClient();
        if (!string.IsNullOrEmpty(NewDepName))
        {
            var addDep = new Department { Name = NewDepName };
            await httpClient.PostAsJsonAsync($"{ServiceRequest}/AddItem", addDep);
            NewDepName = string.Empty;
            CurrentPage = TotalPages;
            await OnInitializedAsync();
            EditRowStyle = "none";
        }
    }
    private async Task Search()
    {

    }
    private async Task SaveItem()
    {
        var httpClient = await getHttpClient.GetPrivateHttpClient();
        if (department is not null)
        {
            await httpClient.PutAsJsonAsync($"{ServiceRequest}/EditItem?id={department.Id}", department);
        }
        await GetDepartments();
        EditRowStyle = "none";
        AddRowStyle = "table-row";
    }
    private async Task CancelChange(MouseEventArgs e)
    {
        EditRowStyle = "none";
        DelConfirmStyle = "none";
        AddRowStyle = "table-row";
    }
    private async Task DeleteItem(MouseEventArgs e)
    {
        var httpClient = await getHttpClient.GetPrivateHttpClient();
        if (department is not null)
        {
            await httpClient.DeleteAsync($"{ServiceRequest}/DeleteItem?id=" + Convert.ToInt32(department.Id));
        }
        await OnInitializedAsync();
        DelConfirmStyle = "none";
        AddRowStyle = "table-row";
        ShowDepDetail = "none";
    }
    private async Task ItemDetail(long id)
    {
        ShowDepDetail = "inherit";
        Persons = new List<Person>();
        ShowDepDetail = "inherit";
        var httpClient = await getHttpClient.GetPrivateHttpClient();
        department = await httpClient.GetFromJsonAsync<Department>($"{ServiceRequest}/GetById?id=" +
        Convert.ToInt32(id));
        {
            foreach (var item in department.DepPersons)
            {
                Persons.Add(item.Person);
            }
        }
    }
    private async Task CurrentPageValue(int newPage)
    {
        CurrentPage = newPage;
        await GetDepartments();
    }
    private async Task PageSizeChanged(int newPageSize)
    {
        PageSize = newPageSize;
        TotalPages = DateSource.Count() % PageSize == 0 ? DateSource.Count() / PageSize : DateSource.Count() / PageSize + 1;
        CurrentPage = 1;
        await GetDepartments();
    }

    private async Task DeleteConfirm(long id)
    {
        department = Departments.Single(i => i.Id == id);
        AddRowStyle = "none";
        EditRowStyle = "none";
        DelConfirmStyle = "inline";
    }

}
